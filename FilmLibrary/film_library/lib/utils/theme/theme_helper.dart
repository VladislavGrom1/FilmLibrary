import 'package:film_library/utils/size_utils.dart';
import 'package:flutter/material.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors(),
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme,
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(final String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
        "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner",
      );
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
        "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner",
      );
    }
    //return theme from map

    final colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(final ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray60002,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 48.fSize,
          fontFamily: 'Mochiy Pop One',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 32.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w800,
        ),
        labelLarge: TextStyle(
          color: appTheme.indigoA400,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 20.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 15.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFF6600),
    primaryContainer: Color(0XFF1E1E1E),
    secondary: Color(0XFF1E1E1E),
    secondaryContainer: Color(0XFFFF6600),
    tertiary: Color(0XFF1E1E1E),
    tertiaryContainer: Color(0XFFFF6600),

    // Background colors
    background: Color(0XFF1E1E1E),

    // Surface colors
    surface: Color(0XFF1E1E1E),
    surfaceTint: Color(0XFF1A1A1A),
    surfaceVariant: Color(0XFFFF6600),

    // Error colors
    error: Color(0XFF1A1A1A),
    errorContainer: Color(0XFF000000),
    onError: Color(0XFFE1A917),
    onErrorContainer: Color(0X262C2C2C),

    // On colors(text colors)
    onBackground: Color(0XFFB3B3B3),
    onInverseSurface: Color(0XFFE1A917),
    onPrimary: Color(0XFF1A1A1A),
    onPrimaryContainer: Color(0XFFB3B3B3),
    onSecondary: Color(0XFFB3B3B3),
    onSecondaryContainer: Color(0XFF1A1A1A),
    onTertiary: Color(0XFFB3B3B3),
    onTertiaryContainer: Color(0XFF1A1A1A),

    // Other colors
    outline: Color(0XFF1A1A1A),
    outlineVariant: Color(0XFF1E1E1E),
    scrim: Color(0XFF1E1E1E),
    shadow: Color(0XFF1A1A1A),

    // Inverse colors
    inversePrimary: Color(0XFF1E1E1E),
    inverseSurface: Color(0XFF1A1A1A),

    // Pending colors
    onSurface: Color(0XFFB3B3B3),
    onSurfaceVariant: Color(0XFF1A1A1A),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber200 => const Color(0XFFFFDD86);
  Color get amber20001 => const Color(0XFFFFE691);
  Color get amber30000 => const Color(0X00FFD55D);
  Color get amber500 => const Color(0XFFFBBC05);
  Color get amber600 => const Color(0XFFF3AF01);
  Color get amberA100 => const Color(0XFFFFEB85);
  Color get amberA200 => const Color(0XFFFFD43B);
  Color get amberA20001 => const Color(0XFFFFC93E);

  // Black
  Color get black900 => const Color(0XFF000000);

  // Blue
  Color get blue100 => const Color(0XFFB3D0F6);
  Color get blue200 => const Color(0XFF99D3FA);
  Color get blue700 => const Color(0XFF0163E0);
  Color get blue800 => const Color(0XFF025BCE);
  Color get blueBorder => const Color(0XFFb0cff5); // Для Profile или Navigation
  Color get blueFillPlayIcon =>
      const Color(0XFF0163e0); // Для Profile или Navigation и
  Color get blue50 => const Color(0XFFE5EEFF); // Для Theory (Drill 1)

  // BlueGray
  Color get blueGray100 => const Color(0XFFD9D9D9);
  Color get blueGray900 => const Color(0XFF283544);
  Color get blueGray90026 => const Color(0X262C2C2C);
  Color get mainBlueGray => const Color.fromARGB(255, 206, 197, 232);

  // DeepOrange
  Color get deepOrange100 => const Color(0XFFFFDAC1);
  Color get deepOrange300 => const Color(0XFFF39E67);
  Color get deepOrange50 => const Color(0XFFFAEBEB);
  Color get deepOrange900 => const Color(0XFFB94B01);

  // Gray
  Color get gray100 => const Color(0XFFF5F5F5);
  Color get gray300 => const Color(0XFFE0E0E0);
  Color get gray400 => const Color(0XFFB5B5B5);
  Color get gray40001 => const Color(0XFFB3B3B3);
  Color get gray600 => const Color(0XFF6D6D6D);
  Color get gray60001 => const Color(0XFF6E6D6D);
  Color get gray60002 => const Color(0XFF828282);
  Color get gray900 => const Color(0XFF1E1E1E);
  Color get gray90001 => const Color(0XFF501F00);

  // Gray
  Color get gray6004f => const Color(0X4F838383);
  Color get grayButton => const Color.fromARGB(255, 127, 128, 131);

  // Indigo
  Color get indigoA400 => const Color(0XFF325AEA);
  Color get blueButton => const Color.fromARGB(255, 95, 93, 229);
  Color get blueBottom => const Color.fromARGB(255, 185, 174, 216);
  Color get purpleButton => const Color.fromARGB(255, 73, 34, 165);

  // Lime
  Color get lime700 => const Color(0XFFA0BD18);

  // Orange
  Color get orange900 => const Color(0XFFD55601);

  // Red
  Color get red500 => const Color(0XFFEB4335);
  Color get redA700 => const Color(0XFFFF0000);
  Color get redButton => const Color.fromARGB(255, 184, 65, 65);
  Color get darkRedButton => const Color.fromARGB(255, 119, 19, 32);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);
  Color get whiteAnnotation => const Color.fromARGB(255, 216, 213, 238);

  // Yellow
  Color get yellow200 => const Color(0XFFFFE7A1);
  Color get yellow400 => const Color(0XFFFFE351);
  Color get yellowA200 => const Color(0XFFFFFF10);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
